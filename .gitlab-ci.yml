---
default:
  tags:
    - build

variables:
  REPOSITORY: "ghsc/neic/algorithms/neic-finitefault"
  DOCKER_IMAGE: "code.usgs.gov:5001/devops/images/usgs/docker:20"
  WASP_IMAGE: "${CI_REGISTRY}/${REPOSITORY}/wasp-ubuntu-dependencies:latest"
   


# Do not run for merge requests
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

stages:
  - init
  - test
  - deploy

##
# Define environment rules
##

.development-env: &development-env
  if: $CI_PROJECT_PATH != 'ghsc/neic/algorithms/neic-finitefault'
  tags:
    - development

.staging-env: &staging-env
  if: >
    $CI_PROJECT_PATH == 'ghsc/neic/algorithms/neic-finitefault'
    && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - staging

.production-env: &production-env
  if: >
    $CI_PROJECT_PATH == 'ghsc/neic/algorithms/neic-finitefault'
    && $CI_COMMIT_BRANCH == 'production'
  tags:
    - production


##
# Define type of pipeline (on a fork or on the upstream project)
##
.fork: &fork
  if: $CI_PROJECT_PATH != 'ghsc/neic/algorithms/neic-finitefault'

.upstream: &upstream
  if: >
    $CI_PROJECT_PATH == 'ghsc/neic/algorithms/neic-finitefault'
    && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

##
# Define the supported systems
##
.images:
  matrix: &images
    - TARGET:
        - dependencies 
        - finitefault
      OPERATING_SYSTEM:
        - ubuntu

.docker_login:
  before_script:
    - |
      test -n "${CI_REGISTRY_USER}" -a -n "${CI_REGISTRY_PASSWORD}" \
          && echo "${CI_REGISTRY_PASSWORD}" | \
          docker login \
          --username "${CI_REGISTRY_USER}" \
          --password-stdin \
          "${CI_REGISTRY}";
  cache:
    paths:
      - .trivy/
  services:
    - alias: docker
      name: "${DOCKER_IMAGE}-dind"

## -------------------------------------
#  Init Stage
## -------------------------------------
Poetry:
  allow_failure: true
  artifacts:
    paths:
      - poetry.toml
      - .venv
      - dist/lambda
    expire_in: 1 week
  image: "${WASP_IMAGE}"
  script:
    - poetry config virtualenvs.in-project true --local
    - poetry install
    - poetry run poe okada
  stage: init

## -------------------------------------
#  Test Stage
## -------------------------------------

Python Lint:
  allow_failure: true
  image: "${WASP_IMAGE}"
  script:
    - poetry run poe lint
  stage: test

Python Test:
  allow_failure: true
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
  image: "${WASP_IMAGE}"
  script:
    - poetry run poe test
  stage: test

Shell Check:
  image: usgs/ubuntu:latest
  script:
    - apt install -y shellcheck
    - shellcheck install.sh -x
    - shellcheck install.d/*
    - shellcheck environment.d/*
  stage: test

## -------------------------------------
#  Deploy Stage
## -------------------------------------

Docker Deploy:
  extends:
    - .docker_login
  image: "${DOCKER_IMAGE}"
  parallel:
    matrix: *images
  rules:
    - if: "$SCHEDULED"
    - changes:
          - Dockerfile
          - fortran_code/*
          - install.d/*
          - poetry.lock
          - pyproject.toml
          - src/*   
  script:
    -  |
      ARGS=();
      for ARG in ${BUILD_ARGS}; do
        ARGS+=("--build-arg" "${ARG}=${!ARG}");
      done
      if [[ ${TARGET} == "dependencies" ]]; then
        ARGS+=("--target" "${TARGET}");
        BUILD="-dependencies";
      fi
    - echo "BUILD= ${BUILD}"
    - echo "TARGET= ${TARGET}"
    - IMAGE="wasp-${OPERATING_SYSTEM}${BUILD}"
    - TAG="${CI_COMMIT_TAG:-latest}"
    - LOCAL_IMAGE="${CI_REGISTRY}/${REPOSITORY}/${IMAGE}:${TAG}"
    - echo "${ARGS[@]} --tag ${LOCAL_IMAGE}" 
    - docker build "${ARGS[@]}" --tag "${LOCAL_IMAGE}" .
    # trivy scan before push
    # fail LOW,MEDIUM vulnerabilities that have a fix available
    - ${TRIVY} image --exit-code 1 --ignore-unfixed --severity LOW,MEDIUM
      --skip-files "/usr/local/bin/trivy"
      "${LOCAL_IMAGE}";
    # fail HIGH,CRITICAL vulnerabilities
    - ${TRIVY} image --exit-code 1 --severity HIGH,CRITICAL
      --skip-files "/usr/local/bin/trivy"
      "${LOCAL_IMAGE}";
    # push to registry
    - if [ "${CI_PROJECT_PATH}" != "ghsc/neic/algorithms/neic-finitefault" ]; then
      echo "Skipping push on non-upstream (${CI_PROJECT_PATH})";
      exit 0;
      fi
    - echo "Pushing image ${LOCAL_IMAGE}"
    - docker push "${LOCAL_IMAGE}";
  stage: deploy
  variables:
    BUILD_ARGS: DCW_VERSION GMT_VERSION GSHHG_VERSION 
    DCW_VERSION: "2.1.1"
    DOCKER_DRIVER: overlay2
    GMT_VERSION: "6.4.0"
    GSHHG_VERSION: "2.3.7"
    PYTHON_VERSION: "3.10"
    TRIVY: trivy --cache-dir .trivy --timeout 10m
